<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Guilherme Guitte</title>
    <link>http://www.guitte.org/post/</link>
    <description>Recent content in Posts on Guilherme Guitte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Fri, 02 Sep 2016 07:59:04 -0300</lastBuildDate>
    <atom:link href="http://www.guitte.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Organizing your e-commerce catalog with MongoDB - 7 masters (imasters)</title>
      <link>http://www.guitte.org/organizing-your-ecommerce-catalog-with-mongodb-7masters-event/</link>
      <pubDate>Fri, 02 Sep 2016 07:59:04 -0300</pubDate>
      
      <guid>http://www.guitte.org/organizing-your-ecommerce-catalog-with-mongodb-7masters-event/</guid>
      <description>&lt;p&gt;I was invited to speak at &lt;a href=&#34;http://setemasters.imasters.com.br/&#34;&gt;7 masters&lt;/a&gt; organized by &lt;a href=&#34;http://imasters.com.br/&#34;&gt;iMasters&lt;/a&gt;. In this day, had more 6 developers that share their experience working with MongoDB in seven minutes each. I decide to talk about how we at &lt;a href=&#34;leroymerlin.com.br&#34;&gt;Leroy Merlin&lt;/a&gt;, uses MongoDB as &lt;a href=&#34;https://en.wikipedia.org/wiki/Product_information_management&#34;&gt;PIM&lt;/a&gt; project.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;9315b314192f454a916d019938ee0ede&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Talk RubyConf Brasil: Melhore a busca textual do seu e-commerce</title>
      <link>http://www.guitte.org/talk-rubyconf-brasil-melhore-a-busca-textual-do-seu-e-commerce/</link>
      <pubDate>Mon, 19 Oct 2015 21:08:12 -0200</pubDate>
      
      <guid>http://www.guitte.org/talk-rubyconf-brasil-melhore-a-busca-textual-do-seu-e-commerce/</guid>
      <description>&lt;p&gt;No dia 19 de setembro, estivemos na RubyConf Brasil à convite do Fábio Akita para palestrarmos. Palestrei sobre os desafios de implementar um motor de busca que se adequa-se a forma com que nosso cliente procura em nosso e-commerce.&lt;/p&gt;

&lt;p&gt;Nossa experiência, foi que qualquer search engine tem suas limitações e há casos que você deve tratar qual a melhor busca a se executar dependendo do que o usuário procurar.&lt;/p&gt;

&lt;p&gt;Confiram os meus slides =)&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;20a4a4315c1a41efbb344f85874a6790&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>6 laravel meetup</title>
      <link>http://www.guitte.org/6-laravel-meetup-sp/</link>
      <pubDate>Mon, 19 Oct 2015 21:05:08 -0200</pubDate>
      
      <guid>http://www.guitte.org/6-laravel-meetup-sp/</guid>
      <description>

&lt;p&gt;No último meetup, aproveitei para falar sobre um assunto que eu gosto muito, testes automatizados e o seu ecossistema.&lt;/p&gt;

&lt;p&gt;Começar a incorporar testes no seu dia-a-dia é algo complicado no começo. Sempre senti que muitos tem dificuldade em entender conceitualmente e aplicar seja num framework ou sem framework.&lt;/p&gt;

&lt;p&gt;Espero que vocês gostem do video:&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;640&#34; height=&#34;385&#34; src=&#34;http://www.youtube.com/embed/imrVCllu8Uk&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;


&lt;h3 id=&#34;slides:f58270b9ac049b5e1969ce100b942200&#34;&gt;Slides&lt;/h3&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;250a65f5068144d2859cf5b01ed1c832&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Applying SOLID principles</title>
      <link>http://www.guitte.org/applying-solid-principles-pt-1/</link>
      <pubDate>Fri, 07 Aug 2015 08:43:27 -0300</pubDate>
      
      <guid>http://www.guitte.org/applying-solid-principles-pt-1/</guid>
      <description>

&lt;p&gt;As a programmer, have you ever seen before classes (if they exists) with so much responsabilities, high coupled and other
creepiest things? If you say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Yes, I&amp;rsquo;m suffering about that, please help me!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For that SOLID was created!&lt;/p&gt;

&lt;p&gt;In 2000&amp;rsquo;s, Michael Feathers introduces into development community the famous &lt;strong&gt;SOLID&lt;/strong&gt;, in which it aims to be principles to guide us in our code design process. Instead, design pattern are &lt;em&gt;Built-in blocks&lt;/em&gt;, &lt;em&gt;SOLID&lt;/em&gt; are just guidelines.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But after all, what&amp;rsquo;s it SOLID?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;SOLID&lt;/em&gt; is an acronym for &lt;em&gt;(Single Responsibility, Open-closed, Liskov Substitution, Interface Segregation, Depedency Inversion)&lt;/em&gt;, that are 5 principles object-oriented design by &lt;em&gt;Uncle Bob&lt;/em&gt;, first let&amp;rsquo;s start with the &lt;em&gt;&amp;ldquo;S&amp;rdquo;&lt;/em&gt; of &lt;em&gt;SOLID&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;single-responsibility-srp:461a9cf8c5c84f94aab0e28557569f68&#34;&gt;Single Responsibility (SRP)&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Single Responsibility Principles&lt;/em&gt; says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A class should have one and only one reason to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See the example below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class MyController extends BaseController
{

    public function index()
    {
        $results = MyModel::where([&#39;foo&#39; =&amp;gt; 1]);

        return View::make(&#39;my-view.index&#39;, compact(&#39;results&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What are the responsabilities of my controller?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build and perform a query into database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I change the query, I have to move on my controller.&lt;/li&gt;
&lt;li&gt;If I change the database source that I was consulting before, I have to move on my controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Soon, this code violates Simple Responsibility Principle.&lt;/p&gt;

&lt;h2 id=&#34;smells:461a9cf8c5c84f94aab0e28557569f68&#34;&gt;Smells&lt;/h2&gt;

&lt;p&gt;To be easy identify when your classes are breaking &lt;em&gt;SRP&lt;/em&gt;, you may wonder:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What would be the responsibility of that class?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stay tuned if you try to using any kind of connectors, for example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;and&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;but also&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a strong hint that your class are doing so much.&lt;/p&gt;

&lt;h2 id=&#34;refactoring:461a9cf8c5c84f94aab0e28557569f68&#34;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;One possible refactoring could be, extracting the database query from the controller using a repository pattern.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/MyController.php&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

...

class MyController extends BaseController
{
    function __construct(Repository $repo) {
        $this-&amp;gt;repo = $repo;
    }

    public function index()
    {
        $results = $this-&amp;gt;repo-&amp;gt;getAllFoo();

        return View::make(&#39;my-view.index&#39;, compact(&#39;results&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;src/Repository.php&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Repository
{
    public function getAllFoo()
    {
        return MyModel::where([&#39;foo&#39; =&amp;gt; 1]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:461a9cf8c5c84f94aab0e28557569f68&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Honestly, simple apply the SRP you will fell an improvement in your application design. Clearly this is not the end,
still exists the other 4 principles, however they are well co-related.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4 laravel meetup</title>
      <link>http://www.guitte.org/4-laravel-meetup-sp/</link>
      <pubDate>Thu, 06 Aug 2015 15:52:13 -0300</pubDate>
      
      <guid>http://www.guitte.org/4-laravel-meetup-sp/</guid>
      <description>&lt;p&gt;No último Laravel Meetup palestrei sobre &lt;em&gt;Organizando o código do seu projeto em laravel: do simples ao complexo&lt;/em&gt;, contando um pouco da minha experiência com Laravel no desenvolvimento do ecommerce da &lt;a href=&#34;www.leroymerlin.com.br&#34;&gt;Leroy Merlin&lt;/a&gt; aplicando um design simples com testes e sob demanda, aperfeiçoando o design da aplicação.&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;640&#34; height=&#34;385&#34; src=&#34;http://www.youtube.com/embed/GCfdj2MCOCo&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;www.speakerdeck.com/guilhermeguitte/organizando-o-codigo-do-seu-projeto-em-laravel-do-simples-ao-complexo&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD in practice with PHPUnit</title>
      <link>http://www.guitte.org/tdd-in-practice-with-phpunit/</link>
      <pubDate>Mon, 03 Aug 2015 07:53:25 -0300</pubDate>
      
      <guid>http://www.guitte.org/tdd-in-practice-with-phpunit/</guid>
      <description>

&lt;p&gt;TDD has become an essential practice for developers to have more confidence
and engage practices such as refactoring. For example, if you updated
some critical library in our application, you can run all tests to see
if some implementation has been broken.&lt;/p&gt;

&lt;p&gt;According to wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Test-driven development (TDD) is a software development process that relies on the
&lt;strong&gt;repetition&lt;/strong&gt; of a very short development cycle: first the developer writes an (initially failing)
&lt;strong&gt;automated test&lt;/strong&gt; case that defines a desired improvement or new function, then produces the minimum
amount of code to pass that test, and finally &lt;strong&gt;refactors&lt;/strong&gt; the new code to acceptable standards.
Kent Beck, who is credited with having developed or &amp;lsquo;rediscovered&amp;rsquo; the technique, stated in 2003 that
TDD encourages simple designs and inspires confidence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tutorial aimed to drive the process of TDD in practice, demonstrating the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The basic concept about RED-GREEN-REFACTOR cycle;&lt;/li&gt;
&lt;li&gt;Setup our testing tools (in this case PHPUnit);&lt;/li&gt;
&lt;li&gt;Basic structure of a Test classes;&lt;/li&gt;
&lt;li&gt;Creating some concrete features, applying TDD.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-concept-of-tdd:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Basic concept of TDD&lt;/h2&gt;

&lt;p&gt;I will explain in-short, what you should know about TDD to put in practice.&lt;/p&gt;

&lt;p&gt;TDD has a concept called RED-GREEN-REFACTOR.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wrozka.github.io/ppppp-pair-programming/img/red-green-refactor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;red-phase:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;RED phase:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write the test of a new feature or a bug to be fixed;&lt;/li&gt;
&lt;li&gt;Run the tests. The new one are going to fail.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;green-phase:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;GREEN phase:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write the code needed to match the test&amp;rsquo;s expectations.&lt;/li&gt;
&lt;li&gt;Run the tests. Now the newly written test should be passing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;refactor-phase:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;REFACTOR phase:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refactor the code written to become more well written, abstract repetition, DRY it, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will see that this cycle will performed several times.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create the basic structure for our application.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-folder-structure:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Creating the Folder structure&lt;/h2&gt;

&lt;p&gt;First at all, let&amp;rsquo;s create the following folder structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2010.32.09.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing-composer:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Installing Composer&lt;/h2&gt;

&lt;p&gt;Before getting started, install &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sS https://getcomposer.org/installer | php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the root&amp;rsquo;s project folder, create the &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;guilhermeguitte/tdd-first-steps&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;A simple introduction explain how to apply TDD with PHPUnit.&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
    &amp;quot;authors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Guilherme Guitte&amp;quot;,
            &amp;quot;email&amp;quot;: &amp;quot;guilherme.guitte@gmail.com&amp;quot;
        }
    ],
    &amp;quot;minimum-stability&amp;quot;: &amp;quot;stable&amp;quot;,
    &amp;quot;require-dev&amp;quot;: {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-phpunit:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Installing PHPUnit&lt;/h2&gt;

&lt;p&gt;Now, add at &lt;code&gt;require-dev&lt;/code&gt; the &lt;code&gt;phpunit&lt;/code&gt; dependency.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;require-dev&amp;quot;: {
    &amp;quot;phpunit/phpunit&amp;quot;: &amp;quot;4.2.*&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run in console &lt;code&gt;composer install&lt;/code&gt; to add all dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ composer.phar install --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the file &lt;code&gt;phpunit.xml&lt;/code&gt; in root directory. PHPUnit need to know where our tests files are located and which configuration to use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;phpunit
         backupGlobals=&amp;quot;false&amp;quot;
         backupStaticAttributes=&amp;quot;false&amp;quot;
         bootstrap=&amp;quot;vendor/autoload.php&amp;quot;
         colors=&amp;quot;true&amp;quot;
         convertErrorsToExceptions=&amp;quot;true&amp;quot;
         convertNoticesToExceptions=&amp;quot;true&amp;quot;
         convertWarningsToExceptions=&amp;quot;true&amp;quot;
&amp;gt;
   &amp;lt;testsuites&amp;gt;
     &amp;lt;testsuite&amp;gt;
       &amp;lt;directory&amp;gt;tests/&amp;lt;/directory&amp;gt;
     &amp;lt;/testsuite&amp;gt;
   &amp;lt;/testsuites&amp;gt;
&amp;lt;/phpunit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final folder structure should be equals to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2010.54.46.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;test-s-file-structure:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Test&amp;rsquo;s file structure&lt;/h3&gt;

&lt;p&gt;See the example of Test class below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class BasicExampleTest extends PHPUnit_Framework_TestCase
{
    public function testSomeThing() {}
    public function nonTest() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The class definition above, is the way we should create our Test classes.
We have to extend &lt;code&gt;PHPUnit_Framework_TestCase&lt;/code&gt; to be able to use the set of tools that
PHPUnit provides.&lt;/p&gt;

&lt;p&gt;Only the methods that have the &lt;code&gt;test&lt;/code&gt; prefix will be called by PHPUnit. So the method &lt;code&gt;testSomeThing()&lt;/code&gt; will be called.&lt;/p&gt;

&lt;p&gt;Now running the &lt;code&gt;vendor/bin/phpunit&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2011.17.48.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, we have did the setup of our application with PHPUnit, now we can create something concrete.&lt;/p&gt;

&lt;h3 id=&#34;commit-it:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Commit it&lt;/h3&gt;

&lt;p&gt;Please, commit this changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
$ git add -A .
$ git commit -m &#39;basic structure&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-feature-s-scope:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;The Feature&amp;rsquo;s scope&lt;/h3&gt;

&lt;p&gt;Until now, we&amp;rsquo;ve seen a basic structure in order to apply TDD, at this moment
we will create more complex tests.
The next example, will be based on Product class. This class will contains the
&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;price&lt;/code&gt; variables and 2 methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) `isValid`: Verifies the state of itself is valid.
2) `getPriceWithCurrency`: Renders the price with currency.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;validating-product-s-name:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Validating Product&amp;rsquo;s name&lt;/h3&gt;

&lt;p&gt;Create the &lt;code&gt;ProductTest.php&lt;/code&gt; at test&amp;rsquo;s folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ProductTest extends PHPUnit_Framework_TestCase
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first step is make a test to verify if the &lt;code&gt;name&lt;/code&gt; attributes is really string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function testShouldValidateNameIsString()
{
    $product       = new Product;
    $product-&amp;gt;name = 123123;

    $this-&amp;gt;assertFalse(
        $product-&amp;gt;isValid(),
        &#39;The name attributes is not a string&#39;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the &lt;code&gt;phpunit&lt;/code&gt; at console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2011.39.20.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The error: &lt;code&gt;Fatal error: Class &#39;Product&#39; not found&lt;/code&gt;, was caused by non-existency &lt;code&gt;Product&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Create the class &lt;code&gt;Product&lt;/code&gt; inside &lt;code&gt;src/&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Product
{
    public $name;
    public $price;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add to &lt;code&gt;composer.json&lt;/code&gt; after the &lt;code&gt;require-dev&lt;/code&gt; key to map the classes inside &lt;code&gt;src/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;autoload&amp;quot;: {
    &amp;quot;classmap&amp;quot;: [
        &amp;quot;src&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s run &lt;code&gt;composer.phar dumpautoload&lt;/code&gt; to map all classes created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ composer.phar dumpautoload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s run again the &lt;code&gt;phpunit&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm&amp;hellip; has a new kind of error (RED Phase):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2011.55.46.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This errors was caused by the method &lt;code&gt;isValid&lt;/code&gt; was not implementing the
functionality to validate the &lt;code&gt;name&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Now, we will implement the &lt;code&gt;isValid()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function isValid()
{
    if(! is_string($this-&amp;gt;name)) {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run again all tests (GREEN Phase):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-25%20%C3%A0s%2017.14.44.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s say if the &lt;code&gt;name&lt;/code&gt; is empty, this test will cover? No, will not.
To be sure, let&amp;rsquo;s create the following test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function testShouldValidateNameISNotEmpty()
{
    $product       = new Product;
    $product-&amp;gt;name = &#39;&#39;;

    $this-&amp;gt;assertFalse($product-&amp;gt;isValid());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the all tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2018.08.11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see the testing was failing, and now we should implement the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function isValid()
{
    if(! $this-&amp;gt;name || ! is_string($this-&amp;gt;name)) {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running all tests again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2018.13.21.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;let-s-refactor:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Let&amp;rsquo;s refactor&lt;/h4&gt;

&lt;p&gt;Looking the &lt;code&gt;ProductTest.php&lt;/code&gt;, you can note a little repetition in the code when
you are testing the &lt;code&gt;name&lt;/code&gt; attribute when is empty or a valid string, we can
you can use a tool called &lt;code&gt;DataProvider&lt;/code&gt; at PHPUnit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a new function called &amp;lsquo;invalidNames&amp;rsquo; in &lt;code&gt;ProductTest.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function invalidNames()
{
    return[
        [&#39;&#39;],
        [123],
        [null]
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can &lt;strong&gt;remove&lt;/strong&gt; all others method to validate &amp;lsquo;name&amp;rsquo; attributes, and implements the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * @dataProvider invalidNames
 */
public function testShouldValidateNameAttribute($value)
{
    $product       = new Product;
    $product-&amp;gt;name = $value;

    $this-&amp;gt;assertFalse($product-&amp;gt;isValid());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;Data Provider&lt;/code&gt;, is a tool to remove data duplication when are you testing some repetitive
values.
To use this feature you need create a &lt;code&gt;public&lt;/code&gt; method inside test class, returning all possible values.
The method&amp;rsquo;s name should be write in a comment on the function with &lt;code&gt;@dataProvider&lt;/code&gt;.
The values returned by the function will be passed as argument at the test.
At the example above, PHPUnit will run the test case function 3 times passing the returned values.&lt;/p&gt;

&lt;p&gt;So far, we have created a validation of the &lt;code&gt;name&lt;/code&gt; attribute, testing and refactor this method
using &lt;code&gt;@dataProvider&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;Running all tests, should be green.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-25%20%C3%A0s%2017.20.21.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;validating-product-s-price:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Validating Product&amp;rsquo;s price&lt;/h3&gt;

&lt;p&gt;Now we will implement the next test case to &lt;code&gt;price&lt;/code&gt; attributes, using &lt;code&gt;@dataProvider&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * @dataProvider invalidPrices
 */
public function testShouldValidatePriceAttribute($value)
{
    $product        = new Product;
    $product-&amp;gt;name  = &#39;Drill&#39;;
    $product-&amp;gt;price = $value;

    $this-&amp;gt;assertFalse($product-&amp;gt;isValid());
}

public function invalidPrices()
{
    return[
        [&#39;&#39;],
        [&#39;123123&#39;],
        [null],
        [&#39;some string&#39;]
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the tests in terminal &lt;code&gt;$ vendor\bin\phpunit&lt;/code&gt; you can see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2018.31.05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s implement to make pass this tests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function isValid()
{
    if(! $this-&amp;gt;name || ! is_string($this-&amp;gt;name)) {
        return false;
    }

    if(! $this-&amp;gt;price || ! $this-&amp;gt;hasPriceValid()) {
        return false;
    }

    return true;
}

protected function hasPriceValid()
{
    return is_float($this-&amp;gt;price) || is_integer($this-&amp;gt;price);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the tests in terminal &lt;code&gt;$ vendor\bin\phpunit&lt;/code&gt; all is green.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-25%20%C3%A0s%2017.17.34.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Please, commit this changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add -A .
$ git commit -m &#39;Basic validation name and price fields&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-getpricewithcurrency-method:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Creating getPriceWithCurrency() method&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public function testShouldReturnPriceWithCurrency()
{
    $product        = new Product;
    $product-&amp;gt;price = 10;
    $expected       = &amp;quot;$ 10&amp;quot;;

    $this-&amp;gt;assertEquals($expected, $product-&amp;gt;getPriceWithCurrency());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-20%20%C3%A0s%2018.37.39.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function getPriceWithCurrency()
{
    return &amp;quot;$ &amp;quot; . $this-&amp;gt;price;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running all tests with &amp;ldquo;vendor/bin/phpunit&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/Captura%20de%20Tela%202014-08-25%20%C3%A0s%2017.21.15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;commit-it-1:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Commit it&lt;/h3&gt;

&lt;p&gt;Please, commit this changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add -A .
$ git commit -m &#39;new getPriceWithCurrency() method has been created in order to return the price with currency as string&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The TDD has a lot of benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give confidences to refactor you code.&lt;/li&gt;
&lt;li&gt;Creates a layer to knows if was a regression of our code.&lt;/li&gt;
&lt;li&gt;If the feature is difficult to test, it&amp;rsquo;s can mean a bad code design.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process of TDD is something that you will incorporate in our day-to-day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.troll.me/images/disaster-girl/they-didnt-use-tdd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve heard people say:
    - &amp;ldquo;TDD is complicated, I not know how to start&amp;rdquo;.
    - &amp;ldquo;I don`t know how to use TDD with my framework X&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I will explain how you can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- First create a branch.
- Start creating our first test.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same way you learn to code, coding, this is valid for
learning tests, test something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/106483810/tdd-phpunit-first-steps/tdd-magic.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;links:2a5133cef429eb10f27e53c1a6baa385&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://phpunit.de/manual/current/en/index.html&#34;&gt;http://phpunit.de/manual/current/en/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://phpunit.de/manual/current/en/appendixes.assertions.html&#34;&gt;http://phpunit.de/manual/current/en/appendixes.assertions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=undefined&amp;amp;sr=8-1&amp;amp;keywords=growing+object+oriented+software+guided+by+tests&#34;&gt;http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627/ref=sr_1_1?ie=UTF8&amp;amp;qid=undefined&amp;amp;sr=8-1&amp;amp;keywords=growing+object+oriented+software+guided+by+tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leanpub.com/laravel-testing-decoded&#34;&gt;https://leanpub.com/laravel-testing-decoded&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>